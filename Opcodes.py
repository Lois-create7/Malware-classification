import glob
import pandas as pd
import os
import sklearn
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier



#Import scikit-learn metrics module for spliting train and test sets
from sklearn.model_selection import train_test_split
from sklearn import tree
import numpy as np
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.metrics import confusion_matrix
import seaborn as sn
import matplotlib.pyplot as plt
file_list=glob.glob(os.path.join(os.getcwd(),"train", "*.asm"))
file_list
opcodes=['mov', 'mul', 'call', 'std', 'imul', 'pop', 'non' , 'cmp' , 'add', 'jz',  'lea', 'test', 'retn', 'xor']
# df stands for dataframe
df = pd.DataFrame()

# Pre-processing: Creating a pandas dataframe
i = 1

# Preprocessing: process all of malwares listed in the file_list
for file_path in file_list:
    with open(file_path, encoding="ISO-8859-1") as f:
        # reads one asm file
        asmFile = f.read()
        # counts the frequency of each opcodes in  asm file and put load frequency fields in the dataframe
        for k in opcodes:
            freq = asmFile.count(k)
            df.loc[i, k] = freq
        i = i + 1

# save pandas dataframe to CSV for later use
df.to_csv('ProcessedData.csv')

df

#Read train labels
labels =pd.read_csv('trainLabels.csv')
features=pd.read_csv('ProcessedData.csv')
print(features)
#from sklearn import svm
#from sklearn.metrics import accuracy_score

#the split, shuffles the classification files.
X_train, X_test, y_train, y_test=train_test_split(features,labels,test_size=.33, random_state=42)
clf=svm.SVC(gamma='scale')
clf.fit(X_train, y_train['Class'])
clf.predict(X_test)
predictions=clf.predict(X_test)

print(y_test['Class'])
print(predictions)
# Instantiate model with 1000 decision trees
rf = RandomForestClassifier(n_jobs=2,n_estimators=1000, random_state=0)
# Train the model on Train data
rf.fit(X_train, y_train['Class'])
# Use the forest's predict method on the test data
#predictions = rf.predict(X_test)

clf=tree.DecisionTreeClassifier()
clf=clf.fit(X_train, y_train['Class'])


scores=cross_val_score(clf,X_train, y_train['Class'], cv=10)
scores
np.mean(scores)*100
scores=cross_val_score(rf,X_train, y_train['Class'], cv=10)
scores
np.mean(scores)*100

#compute confusion matrix

cm=confusion_matrix(y_test['Class'], predictions)

plt.figure(figsize = (15, 15))
sn.heatmap(cm, annot=True, linewidths=.5, cmap="YlGnBu", fmt='g')
plt.yticks(np.arange(9), ('Ramnit', 'Lollipop', 'Kelihos_ver3', 'Vundo', 'Simda', 'Tracur', 'Kelihos_ver1', 'Obfuscator.ACY', 'Gatak'))
plt.xticks(np.arange(9), ('Ramnit', 'Lollipop', 'Kelihos_ver3', 'Vundo', 'Simda', 'Tracur', 'Kelihos_ver1', 'Obfuscator.ACY', 'Gatak'))
#plot confusion matrix
plt.show()